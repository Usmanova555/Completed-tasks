30.10.20
Исключения
**********
независимо оттого, что записывается в try, эот перезаписывается в finally (слайд 15)
файналли важнее чем трай
если выходим принудительно, то всё, что ниже не выводится кроме файналли
после файналли ничего не выполняется

5.11.20
1 часть
Модули
******
В питоне модуль - это любой файл
Как создать - написать свой файл 
Как подключить - импорт 
Через запятую импортировать несколько, но лучше 1 модуль - 1 строка
import simplemath 

А если есть нужен только 1 класс из всех? From
import * вообще запрещается использовать
а если нужен только add, то from simplemath import add
print(add(1,2)) а ещё чтобы он нашёл где это находится, ему надо сказать 

Алиасы - если чёто там конфликтует 
Это всё можно соеденить через from и использовать запятую
Импорт
Домашняя директория - то, где мы сейчас - это папка (j:\work)
Переменная окружения
Стандартная библиотека - то, что поставилось с питоном, файлы с разрешением .pth 
открываются через тут штуку снизу на слайде

Импорт:
*поиск модуля 
*компиляция 
*запуск  - все модули, которые импортируются - запускаются
чтобы этого не происходило есть проверка 
точка входа - это именно пай файл!
чтобы избежать этого есть некоторое подобие мэйна и это __name__
if __name__ == "__main__": print("Hello")
это чтобы не запустилось, так как не пройдёт проверку 

файл __init__.py - он меняет директорию на питон пакет 
обычно там прописываются особенности импорта, обычно он просто пустой
скрипты, которые запускаются при импорте чего-либо из этого пакета

PEP - ???

если модуля нет - import error
а если нет того, что мы исп - attributere? поэтому модуль - это тоже объект
import* - мы смотрим какие вещи можно импортировать из этого модулая, а какие нет

__all__ - список с перечислением того, что можно импортировать из этого пакета 
то есть есть доступ только к тому,что мы объявили в __all__ короче там надо списать с 
её записи

Импорты - лучше пользоваться абсолютныим импортами, но там есть много запретов
А ещё модуль - это объект у которого есть поля и методы

import mathpack.simplemath as math

print(math.value)
print(math.add(1))
math.value = 13
print(math.value)
print(math.add(1))

команда from даёт копию каких-то конкретных значений (полей и методов внутри), поэтому 
в самом модуле всё остаётся так же как в модуле 
а import ссылка на этот объект и если что-то поменяется, то это отразится на модуле

2 часть
Менеджеры пакетов
*****************
Позволяют устанавливать сторонние библиотеки
pip библиотека - что это такое
там есть файл с библиотеки, вообще там 62 строки
в один момент просто всё в огне и что делать?
поэтому люди пишут файлик requirements.in 
+ dev + prod + test + etc
install
у pip есть команда check, которая проверяет код ошибки
вся работа с Интернетом построена на работе с request 
pip-tools
потому что он не понимает что зависит от чего. Поэтому был сделан пакет pip-tools

дальше был установлен пакет pipenv и там что там. 
третье но - setup.py с ним не умеет рабоать эта штука и если в нём описаны какие-то 
зависимости, то он не умеет с ними работать и чёто ещё

недавно появился проект poetry и теперь в нём описываем записимости dev, системные 
вещи. Его написали с нуля и поэтому при установке пакетов берут первую подходящую
и чёто-там. 

и вот это есть 4 менеджера пакетов и что теперь есть большое кодичество этих всяких 
менеджеров и теперь есть пакет dephell, который позволяет конвертировать один пакет
в другой. В статье есть какие-то конспектики. И в домашке доклад на полтора часа про
poentry и как всё завернуть чтобы было не стыдно и как завернуть это всё в терминал.
В общем надо будет посмотреть и завернуть это всё в терминал. 













